
import telebot
from telebot import types

BOT_TOKEN = "7889861772:AAH80YYS3VDQtZEJAQOvGc67npq2IrCxmds"
ADMIN_ID = 7609470280

bot = telebot.TeleBot(BOT_TOKEN)

user_data = {}

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–û—Å–∏–Ω—Ç–µ—Ä")
    btn2 = types.KeyboardButton("–û–ø–µ—Ä–∞—Ç–æ—Ä")
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, "–ö—Ç–æ —Ç—ã?", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ["–û—Å–∏–Ω—Ç–µ—Ä", "–û–ø–µ—Ä–∞—Ç–æ—Ä"])
def handle_role(message):
    role = message.text
    user_data[message.chat.id] = {"role": role, "answers": []}
    if role == "–û—Å–∏–Ω—Ç–µ—Ä":
        bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –æ–ø—ã—Ç –≤ –æ—Å–∏–Ω—Ç–µ?")
    else:
        bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –æ–ø—ã—Ç –≤ –≤–æ—Ä–∫–µ?")

@bot.message_handler(func=lambda message: message.chat.id in user_data and len(user_data[message.chat.id]["answers"]) < 3)
def handle_answers(message):
    data = user_data[message.chat.id]
    data["answers"].append(message.text)
    questions = {
        "–û—Å–∏–Ω—Ç–µ—Ä": [
            "–ö–∞–∫–æ–π –æ–ø—ã—Ç –≤ –æ—Å–∏–Ω—Ç–µ?",
            "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å —Ä–∞–±–æ—Ç–µ?",
            "–ë—ã–ª –ª–∏ –æ–ø—ã—Ç –≤ –≤–æ—Ä–∫–µ?"
        ],
        "–û–ø–µ—Ä–∞—Ç–æ—Ä": [
            "–ö–∞–∫–æ–π –æ–ø—ã—Ç –≤ –≤–æ—Ä–∫–µ?",
            "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å —Ä–∞–±–æ—Ç–µ?",
            "–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?"
        ]
    }

    if len(data["answers"]) < 3:
        next_q = questions[data["role"]][len(data["answers"])]
        bot.send_message(message.chat.id, next_q)
    else:
        summary = f"üì• –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ ({data['role']}):\n"
        for q, a in zip(questions[data["role"]], data["answers"]):
            summary += f"\n‚ùì {q}\nüí¨ {a}\n"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{message.chat.id}"))
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_{message.chat.id}"))
        bot.send_message(ADMIN_ID, summary, reply_markup=markup)
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("accept_") or call.data.startswith("reject_"))
def handle_decision(call):
    user_id = int(call.data.split("_")[1])
    if "accept" in call.data:
        bot.send_message(user_id, "üéâ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!")
        bot.answer_callback_query(call.id, "–ü—Ä–∏–Ω—è—Ç–æ")
    else:
        bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        bot.answer_callback_query(call.id, "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")

bot.infinity_polling()
